{"version":3,"sources":["Components/User/User.js","Components/User/UserList.js","Components/UserForm/FormInput.js","Components/Things/SubmitResetCustomButtonGroup.js","Components/Things/CloseButtonRight.js","Components/UserForm/UserForm.js","Components/Navigation/NavigationBar.js","App.js","reportWebVitals.js","index.js"],"names":["User","username","age","color","index","Row","className","Col","sm","Card","style","Body","Text","UserList","memo","users","undefined","length","map","user","key","FormInput","id","labelValue","placeHolder","onChangeHandler","onBlur","value","errorMessage","type","Form","Group","controlId","Label","Control","name","placeholder","onChange","isInvalid","isValid","Feedback","SubmitResetCustomButtonGroup","buttonDirection","isDisabled","buttonGap","submitButtonValue","resetButtonValue","onResethandler","direction","gap","Stack","Button","varient","disabled","onClick","CloseButtonRight","onCloseFormHandler","CloseButton","UserFormTemplate","handleSubmit","handleChange","handleBlur","handleReset","dirty","values","touched","errors","submitDisabled","noValidate","onSubmit","UserForm","onSubmitHandler","validationSchema","Yup","min","max","required","initialValues","event","resetForm","initialErrors","validateOnMount","props","NaviationBar","Navbar","bg","variant","expand","Container","Brand","href","Toggle","Collapse","Nav","Link","App","useState","setUsers","showAddUserForm","setShowUserForm","shouldShowUserform","priorValue","fluid","priorList","newList","unshift","Date","now","Math","floor","random","toString","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b97871c.chunk.js","sourcesContent":["import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst User = ({ username, age, color, index }) => {\n    return (\n        <Row className=\"m-1\">\n            <Col sm='auto' >\n                <Card style={{ color: color }} >\n                    <Card.Body>\n                        <Card.Text>{index}</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n            <Col sm='6' >\n                <Card style={{ color: color }} >\n                    <Card.Body>\n                        <Card.Text>{username} (  {age} {age > 1 ? \"years\" : \"year\"} old) </Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row >)\n}\n\nexport default User;","import { memo } from \"react\";\nimport User from \"./User\";\n\nconst UserList = memo(({ users }) => {\n\n    if (users === undefined || users.length === 0) return '';\n\n    return users.map((user, index) => <User key={user.key} {...user} index={index} />)\n\n});\n\nexport default UserList;","import Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\n\nconst FormInput = ({ id, labelValue, placeHolder, onChangeHandler, onBlur, value, errorMessage, type }) => {\n\n    return (\n        < Row >\n            <Form.Group className=\"mb-3\" controlId={`controller-${id}`}>\n                <Form.Label>{labelValue}</Form.Label>\n                <Form.Control type={type} name={id} placeholder={placeHolder}\n                    onBlur={onBlur} onChange={onChangeHandler} value={value}\n                    isInvalid={errorMessage} isValid={!errorMessage} />\n                <Form.Control.Feedback type=\"invalid\">{errorMessage}</Form.Control.Feedback>\n            </Form.Group>\n        </Row >)\n}\n\nexport default FormInput;","import Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Stack from \"react-bootstrap/Stack\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SubmitResetCustomButtonGroup = ({ buttonDirection, isDisabled, buttonGap, submitButtonValue, resetButtonValue, onResethandler }) => {\n\n    const direction = buttonDirection || \"horizontal\";\n    const gap = buttonGap || 2;\n\n    return (\n        <Row>\n            <Col>\n                <Stack direction={direction} gap={gap}>\n                    <Button varient=\"primary\" type=\"submit\" disabled={isDisabled}>{submitButtonValue}</Button>\n                    <Button varient=\"primary\" type=\"button\" onClick={onResethandler}>{resetButtonValue}</Button>\n                </Stack>\n            </Col>\n        </Row>\n    )\n}\n\nexport default SubmitResetCustomButtonGroup;","import Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport CloseButton from \"react-bootstrap/CloseButton\";\n\nconst CloseButtonRight = ({ onCloseFormHandler }) => {\n    return (\n        <Row >\n            <Col>\n                <CloseButton onClick={onCloseFormHandler} className=\"float-sm-end\" />\n            </Col>\n        </Row>\n    )\n}\n\nexport default CloseButtonRight;","import * as Yup from 'yup'\nimport { Formik, Form } from 'formik'\n\n// import Form from \"react-bootstrap/Form\";\n\nimport FormInput from \"./FormInput\";\nimport SubmitResetCustomButtonGroup from \"./../Things/SubmitResetCustomButtonGroup\"\nimport CloseButtonRight from '../Things/CloseButtonRight';\n\n// Scope of userform \n// 1. validate the inputs\n// 2. after all validation completed, submit data to store\nconst UserForm = ({ onSubmitHandler, onCloseFormHandler }) => {\n\n    const onSubmitHandlerFormik = (event, { resetForm }) => {\n        onSubmitHandler(event, resetForm)\n    }\n    const validationSchema = Yup.object(\n        {\n            username: Yup.string().min(5, 'Must be >= to 5 characters').max(50, 'Must be 50 characters or less').required('Required'),\n            age: Yup.number().min(1, 'Age has to be greater than 0').required('Required')\n        }\n    )\n    return (\n        <Formik initialValues={{\n            username: '',\n            age: '',\n        }}\n            validationSchema={validationSchema}\n            onSubmit={onSubmitHandlerFormik}\n            initialErrors={{ username: \"Required\", age: \"Required\" }}\n            validateOnMount={true}\n        >\n            {props => <UserFormTemplate {...props} onCloseFormHandler={onCloseFormHandler} />}\n        </Formik >\n    )\n}\n\nconst UserFormTemplate = ({ handleSubmit, handleChange, handleBlur, handleReset,\n    dirty, values, touched, errors, onCloseFormHandler }) => {\n\n    const submitDisabled = !(dirty && (!errors.username && !errors.age))\n\n    return (\n        <div>\n            <Form noValidate onSubmit={handleSubmit} >\n                <CloseButtonRight onCloseFormHandler={onCloseFormHandler} />\n                <FormInput id=\"username\" type=\"text\" labelValue=\"Username\" placeHolder=\"Enter your username\"\n                    onChangeHandler={handleChange} onBlur={handleBlur} touched={touched.username}\n                    errorMessage={errors.username} value={values.username} />\n                <FormInput id=\"age\" type=\"number\" labelValue=\"Age\" placeHolder=\"Enter your age in years\"\n                    onChangeHandler={handleChange} onBlur={handleBlur} touched={touched.age}\n                    errorMessage={errors.age} value={values.age} />\n                <SubmitResetCustomButtonGroup\n                    resetButtonValue=\"Reset Form\" submitButtonValue=\"Add User\"\n                    isDisabled={submitDisabled}\n                    onResethandler={handleReset}\n                />\n            </Form>\n        </div>)\n}\n\nexport default UserForm;","import { Navbar, Container, Nav } from 'react-bootstrap'\nconst NaviationBar = () => {\n\n    return (<Navbar bg=\"dark\" variant='dark' expand=\"lg\">\n        <Container>\n            <Navbar.Brand href=\"#home\">The Page</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"me-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Container>\n    </Navbar>)\n}\n\nexport default NaviationBar;","import Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\n\nimport UserList from \"./Components/User/UserList\";\nimport UserForm from \"./Components/UserForm/UserForm\";\nimport { Fragment, useState } from \"react\";\nimport NaviationBar from \"./Components/Navigation/NavigationBar\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [showAddUserForm, setShowUserForm] = useState(false);\n\n  const shouldShowUserform = () => {\n    setShowUserForm((priorValue) => !priorValue);\n  };\n\n  const onFormSubmitHandler = ({ username, age }, resetForm) => {\n    setUsers((priorList) => {\n      let newList = [...priorList];\n      newList.unshift({ key: Date.now(), username: username, age: age, color: `#${(Math.floor(Math.random() * 16777215).toString(16))}` });\n      return newList;\n    });\n    shouldShowUserform();\n    resetForm();\n  };\n\n  return (\n    <Fragment>\n      <NaviationBar />\n      <Container className=\"p-5 bg-dark\" variant=\"dark\" fluid=\"true\">\n        <Container className=\"p-3 bg-light border rounded\">\n          {!showAddUserForm && (\n            <Button\n              varient=\"primary\"\n              type=\"button\"\n              onClick={shouldShowUserform}\n            >\n              Open User Form\n            </Button>\n          )}\n          {showAddUserForm && (\n            <Row>\n              <Col>\n                <UserForm\n                  onSubmitHandler={onFormSubmitHandler}\n                  onCloseFormHandler={shouldShowUserform}\n                />\n              </Col>\n            </Row>\n          )}\n        </Container>\n\n        <Container>\n          <Row>\n            <br />\n          </Row>\n        </Container>\n\n        {users.length > 0 && (\n          <Container className=\"p-3 bg-light border\" lg=\"auto\">\n            <UserList users={users} />\n          </Container>\n        )}\n      </Container>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}